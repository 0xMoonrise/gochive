// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database

import (
	"context"
)

const getArchive = `-- name: GetArchive :one
SELECT id, filename, editorial, cover_page, file, favorite, thumbnail_image, created_at FROM archive_schema.archive WHERE id = $1 LIMIT 1
`

func (q *Queries) GetArchive(ctx context.Context, id int32) (ArchiveSchemaArchive, error) {
	row := q.db.QueryRowContext(ctx, getArchive, id)
	var i ArchiveSchemaArchive
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Editorial,
		&i.CoverPage,
		&i.File,
		&i.Favorite,
		&i.ThumbnailImage,
		&i.CreatedAt,
	)
	return i, err
}

const getArchiveByName = `-- name: GetArchiveByName :one
SELECT filename FROM archive_schema.archive WHERE filename=name
`

func (q *Queries) GetArchiveByName(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, getArchiveByName)
	var filename string
	err := row.Scan(&filename)
	return filename, err
}

const insertFile = `-- name: InsertFile :exec
INSERT INTO archive_schema.archive (filename, editorial, file)
VALUES($1, $2, $3)
`

type InsertFileParams struct {
	Filename  string `json:"filename"`
	Editorial string `json:"editorial"`
	File      []byte `json:"file"`
}

func (q *Queries) InsertFile(ctx context.Context, arg InsertFileParams) error {
	_, err := q.db.ExecContext(ctx, insertFile, arg.Filename, arg.Editorial, arg.File)
	return err
}
